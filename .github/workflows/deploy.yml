name: 🚀 Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, bcmath
        tools: composer:v2

    - name: 📦 Install dependencies locally
      run: composer install --no-dev --optimize-autoloader

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: 🌐 Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H 64.188.10.53 >> ~/.ssh/known_hosts

    - name: 📤 Deploy to server
      env:
        SERVER_IP: 64.188.10.53
        SERVER_USER: root
        PROJECT_PATH: /var/www/petsbook-flight
      run: |

        set -e
        set -x

        # 1. Копируем проект (точная копия, кроме игнорируемых)
        echo "🚀 Deploying to $SERVER_IP..."

        # 1. Копируем проект (точная копия, кроме игнорируемых)
        rsync -avz --delete \
          --exclude='.git' --exclude='node_modules' --exclude='vendor' \
          --exclude='logs/*' --exclude='.env*' \
          ./ $SERVER_USER@$SERVER_IP:$PROJECT_PATH/

        # 2. Копируем .env.production
        ssh $SERVER_USER@$SERVER_IP "rm -f $PROJECT_PATH/.env.production"
        ssh $SERVER_USER@$SERVER_IP "echo '${{ secrets.ENV_PROD_PRODUCTION }}' > $PROJECT_PATH/.env.production && chmod 600 $PROJECT_PATH/.env.production"

        # 3. Перезапускаем контейнеры с переменными окружения из .env.production
        ssh $SERVER_USER@$SERVER_IP "
          cd $PROJECT_PATH
          docker compose -f docker-compose.prod.yml down
          docker compose -f docker-compose.prod.yml up -d --build
        "

        # 4. Устанавливаем зависимости внутри контейнера
        ssh $SERVER_USER@$SERVER_IP "docker exec petsbook-php-prod composer install --no-dev --optimize-autoloader"

        # 5. Создаём папку, если её нет, и чиним права
        ssh $SERVER_USER@$SERVER_IP "mkdir -p $PROJECT_PATH/public/profile-images/email-tmpl"
        ssh $SERVER_USER@$SERVER_IP "docker exec petsbook-php-prod chown -R www-data:www-data /var/www/html/public/profile-images"
        ssh $SERVER_USER@$SERVER_IP "docker exec petsbook-php-prod chmod -R 755 /var/www/html/public/profile-images"

        # 6. Проверяем статус контейнеров
        ssh $SERVER_USER@$SERVER_IP "cd $PROJECT_PATH && docker compose -f docker-compose.prod.yml ps"

    - name: 🧪 Test API
      run: |
        sleep 10
        if curl -f -s -k "https://64.188.10.53/api/test" > /dev/null; then
          echo "✅ API is working!"
        else
          echo "❌ API test failed"
          ssh root@64.188.10.53 "docker exec petsbook-php-prod tail -20 /var/www/html/logs/php_errors.log" || true
          exit 1
        fi

    - name: 🎉 Deployment Status
      run: |
        echo "🎉 Deployed at: $(date)"
        echo "🌐 API URL: https://64.188.10.53"